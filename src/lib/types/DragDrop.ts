// src/lib/types/DragDrop.ts
// TypeScript-Definitionen f√ºr Drag & Drop-Funktionalit√§t

/**
 * MIME-Type f√ºr Tab-√úbertragung zwischen Fenstern (F17)
 */
export const TAB_DRAG_MIME_TYPE = 'application/x-svelte-tab';

/**
 * Tab-Daten f√ºr DataTransfer (F18)
 * Diese Struktur wird als JSON √ºbertragen
 */
export interface TabTransferData {
	/** Tab-ID f√ºr Identifikation */
	id: string;

	/** Komponententyp des Tabs */
	type: string;

	/** Titel des Tabs */
	title: string;

	/** Quell-Fenster-ID (f√ºr Debugging) */
	sourceWindowId?: string;
}

/**
 * Drag & Drop Event-Handler-Types
 */
export interface DragDropHandlers {
	/** Handler f√ºr dragstart-Event */
	onDragStart?: (event: DragEvent, tabId: string) => void;

	/** Handler f√ºr dragend-Event (F19) */
	onDragEnd?: (event: DragEvent, tabId: string) => void;

	/** Handler f√ºr dragover-Event */
	onDragOver?: (event: DragEvent) => void;

	/** Handler f√ºr drop-Event (F20) */
	onDrop?: (event: DragEvent) => void;
}

/**
 * Drag-Zustand f√ºr visuelles Feedback
 */
export interface DragState {
	/** Wird gerade ein Tab gezogen? */
	isDragging: boolean;

	/** ID des gezogenen Tabs */
	draggedTabId: string | null;

	/** Ist die aktuelle Zone eine g√ºltige Drop-Zone? */
	isValidDropZone: boolean;
}

/**
 * Konfiguration f√ºr svelte-dnd-action (F16)
 */
export interface DndZoneConfig {
	/** Eindeutige ID f√ºr die DnD-Zone */
	id: string;

	/** Typ der Items in dieser Zone */
	type: string;

	/** Soll Drag-Handle verwendet werden? */
	dragHandle?: boolean;

	/** Animationsdauer in ms */
	flipDurationMs?: number;
}

/**
 * Drop-Effekt-Types f√ºr externe Drops (F19)
 */
export type DropEffect = 'none' | 'copy' | 'link' | 'move';

console.log('üéØ Drag&Drop-Definitionen geladen - DataTransfer und Event-Types bereit');
